name: Release standalone docker image
on:
    push:
        branches:
            - "main"
        tags:
            - "infisical/v*.*.*-postgres"
    workflow_dispatch:


permissions:
  contents: write
  id-token: write
  packages: write

env:
  KUBERNETES_VERSION: 1.26.0
  HELM_CHART_PATH: helm-charts/in
  DOCKER_IMAGE: docker.io/infisical/infisical
  GHCR_REGISTRY: ghcr.io/groundnuty
  K8S_VERSION: "1.28.0"
  HELM_VERSION: 3.8.1
  GO_VERSION: 1.21.x


jobs:
    infisical-tests:
        name: Run tests before deployment
        # https://docs.github.com/en/actions/using-workflows/reusing-workflows#overview
        uses: ./.github/workflows/run-backend-tests.yml

    infisical-standalone:
        name: Build infisical standalone image postgres
        runs-on: ubuntu-latest
        needs: [infisical-tests]
        steps:
            - name: Extract version from tag
              id: extract_version
              run: echo "::set-output name=version::${GITHUB_REF_NAME#infisical/}"
            - name: ☁️ Checkout source
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: 📦 Install dependencies to test all dependencies
              run: npm ci --only-production
              working-directory: backend
            - name: version output
              run: |
                  echo "Output Value: ${{ steps.version.outputs.major }}"
                  echo "Output Value: ${{ steps.version.outputs.minor }}"
                  echo "Output Value: ${{ steps.version.outputs.patch }}"
                  echo "Output Value: ${{ steps.version.outputs.version }}"
                  echo "Output Value: ${{ steps.version.outputs.version_type }}"
                  echo "Output Value: ${{ steps.version.outputs.increment }}"
            - name: Save commit hashes for tag
              id: commit
              uses: pr-mpt/actions-commit-hash@v2
            - name: 🔧 Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: 🐋 Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_PASSWORD }}
            - name: Set up Depot CLI
              uses: depot/setup-action@v1
            - name: 📦 Build backend and export to Docker
              uses: docker/build-push-action@v3
              with:
                  push: true
                  sbom: true
                  provenance: true
                  context: .
                  tags: |
                      solomonai/developer-platform:latest-postgres
                      solomonai/developer-platform:latest
                      solomonai/developer-platform:${{ steps.commit.outputs.short }}
                      solomonai/developer-platform:${{ steps.extract_version.outputs.version }}
                  platforms: linux/amd64,linux/arm64
                  file: Dockerfile.standalone-infisical
                  build-args: |
                      POSTHOG_API_KEY=${{ secrets.PUBLIC_POSTHOG_API_KEY }}
                      INFISICAL_PLATFORM_VERSION=${{ steps.extract_version.outputs.version }}

    infisical-fips-standalone:
        name: Build infisical standalone image postgres
        runs-on: ubuntu-latest
        needs: [infisical-tests]
        steps:
            - name: Extract version from tag
              id: extract_version
              run: echo "::set-output name=version::${GITHUB_REF_NAME#infisical/}"
            - name: ☁️ Checkout source
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: 📦 Install dependencies to test all dependencies
              run: npm ci --only-production
              working-directory: backend
            - name: version output
              run: |
                  echo "Output Value: ${{ steps.version.outputs.major }}"
                  echo "Output Value: ${{ steps.version.outputs.minor }}"
                  echo "Output Value: ${{ steps.version.outputs.patch }}"
                  echo "Output Value: ${{ steps.version.outputs.version }}"
                  echo "Output Value: ${{ steps.version.outputs.version_type }}"
                  echo "Output Value: ${{ steps.version.outputs.increment }}"
            - name: Save commit hashes for tag
              id: commit
              uses: pr-mpt/actions-commit-hash@v2
            - name: 🔧 Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: 🐋 Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_PASSWORD }}
            - name: Set up Depot CLI
              uses: depot/setup-action@v1
            - name: 📦 Build backend and export to Docker
              uses: docker/build-push-action@v3
              with:
                  push: true
                  sbom: true
                  provenance: true
                  context: .
                  tags: |
                      solomonai/developer-platform-fips:latest-postgres
                      solomonai/developer-platform-fips:latest
                      solomonai/developer-platform-fips:${{ steps.commit.outputs.short }}
                      solomonai/developer-platform-fips:${{ steps.extract_version.outputs.version }}
                  platforms: linux/amd64,linux/arm64
                  file: Dockerfile.fips.standalone-infisical
                  build-args: |
                      POSTHOG_API_KEY=${{ secrets.PUBLIC_POSTHOG_API_KEY }}
                      INFISICAL_PLATFORM_VERSION=${{ steps.extract_version.outputs.version }}
    deploy:
        name: Deploy to production environment
        runs-on: ubuntu-latest
        needs: [infisical-tests, infisical-standalone, infisical-fips-standalone]
        env:
          working-directory: .
          cluster: ${{ secrets.PROD_CLUSTER_ID }}
        steps:
          - name: Checkout
            uses: actions/checkout@v4
            with:
              fetch-depth: 0

          - name: Update SHA
            run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/sha/_meta

          - name: Set up Helm
            uses: azure/setup-helm@v3
            with:
              version: ${{ env.HELM_VERSION }}

          - name: Add Helm repositories
            working-directory: ${{env.working-directory}}
            run: |
              helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
              helm repo add bitnami https://charts.bitnami.com/bitnami
              helm repo update

          - name: Build Helm dependencies
            working-directory: ${{env.working-directory}}
            run: |
              helm dependency build ./helm-charts/infisical

          - name: Install doctl
            uses: digitalocean/action-doctl@v2
            with:
              token: ${{ secrets.DIGITALOCEAN_TOKEN }}

          - name: Deploy To Production Environment
            working-directory: ${{env.working-directory}}
            run: |
              doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{env.cluster}}
              
              # Create namespace if it doesn't exist
              kubectl create namespace platform --dry-run=client -o yaml | kubectl apply -f -
              
              # Check if release exists
              if ! helm status infisical -n platform >/dev/null 2>&1; then
                echo "No existing release found. Performing fresh installation..."
                helm install infisical ./helm-charts/infisical \
                  --values ./helm-charts/infisical/values.yaml \
                  --set smtp.password=${{ secrets.RESEND_API_KEY }} \
                  --set auth.google.clientId=${{ secrets.DEVELOPER_PLATFORM_GOOGLE_CLIENT_ID }} \
                  --set auth.google.clientSecret=${{ secrets.DEVELOPER_PLATFORM_GOOGLE_CLIENT_SECRET }} \
                  --set auth.github.clientId=${{ secrets.DEVELOPER_PLATFORM_GITHUB_CLIENT_ID }} \
                  --set auth.github.clientSecret=${{ secrets.DEVELOPER_PLATFORM_GITHUB_CLIENT_SECRET }} \
                  --set postgresql.useExistingPostgresSecret.connectionUri=${{ secrets.DEVELOPER_PLATFORM_POSTGRES_CONNECTION_URI }} \
                  --set redis.connectionUri=${{ secrets.DEVELOPER_PLATFORM_REDIS_CONNECTION_URI }} \
                  --namespace platform \
                  --create-namespace \
                  --timeout 10m
              else
                echo "Existing release found. Performing upgrade..."
                helm upgrade infisical ./helm-charts/infisical \
                  --values ./helm-charts/infisical/values.yaml \
                  --set smtp.password=${{ secrets.RESEND_API_KEY }} \
                  --set auth.google.clientId=${{ secrets.DEVELOPER_PLATFORM_GOOGLE_CLIENT_ID }} \
                  --set auth.google.clientSecret=${{ secrets.DEVELOPER_PLATFORM_GOOGLE_CLIENT_SECRET }} \
                  --set auth.github.clientId=${{ secrets.DEVELOPER_PLATFORM_GITHUB_CLIENT_ID }} \
                  --set auth.github.clientSecret=${{ secrets.DEVELOPER_PLATFORM_GITHUB_CLIENT_SECRET }} \
                  --set postgresql.useExistingPostgresSecret.connectionUri=${{ secrets.DEVELOPER_PLATFORM_POSTGRES_CONNECTION_URI }} \
                  --set redis.connectionUri=${{ secrets.DEVELOPER_PLATFORM_REDIS_CONNECTION_URI }} \
                  --namespace platform \
                  --timeout 10m
              fi