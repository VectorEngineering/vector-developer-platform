name: Production Deployment - Developer Platform

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  packages: write

env:
  KUBERNETES_VERSION: 1.26.0
  HELM_CHART_PATH: helm-charts/in
  DOCKER_IMAGE: docker.io/infisical/infisical
  GHCR_REGISTRY: ghcr.io/groundnuty
  K8S_VERSION: "1.28.0"
  HELM_VERSION: 3.8.1
  GO_VERSION: 1.21.x

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      working-directory: .
      cluster: ${{ secrets.PROD_CLUSTER_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update SHA
        run: echo $GITHUB_SHA > $GITHUB_WORKSPACE/sha/_meta

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Helm repositories
        working-directory: ${{env.working-directory}}
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Build Helm dependencies
        working-directory: ${{env.working-directory}}
        run: |
          helm dependency build ./helm-charts/infisical

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Deploy To Production Environment
        working-directory: ${{env.working-directory}}
        run: |
          doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{env.cluster}}
          
          # Create namespace if it doesn't exist
          kubectl create namespace platform --dry-run=client -o yaml | kubectl apply -f -
          
          # Check if release exists
          if ! helm status infisical -n platform >/dev/null 2>&1; then
            echo "No existing release found. Performing fresh installation..."
            helm install infisical ./helm-charts/infisical \
              --values ./helm-charts/infisical/values.yaml \
              --set smtp.password=${{ secrets.RESEND_API_KEY }} \
              --set auth.google.clientId=${{ secrets.DEVELOPER_PLATFORM_GOOGLE_CLIENT_ID }} \
              --set auth.google.clientSecret=${{ secrets.DEVELOPER_PLATFORM_GOOGLE_CLIENT_SECRET }} \
              --set auth.github.clientId=${{ secrets.DEVELOPER_PLATFORM_GITHUB_CLIENT_ID }} \
              --set auth.github.clientSecret=${{ secrets.DEVELOPER_PLATFORM_GITHUB_CLIENT_SECRET }} \
              --set postgresql.useExistingPostgresSecret.connectionUri=${{ secrets.DEVELOPER_PLATFORM_POSTGRES_CONNECTION_URI }} \
              --set redis.connectionUri=${{ secrets.DEVELOPER_PLATFORM_REDIS_CONNECTION_URI }} \
              --namespace platform \
              --create-namespace \
              --timeout 10m
          else
            echo "Existing release found. Performing upgrade..."
            helm upgrade infisical ./helm-charts/infisical \
              --values ./helm-charts/infisical/values.yaml \
              --set smtp.password=${{ secrets.RESEND_API_KEY }} \
              --set auth.google.clientId=${{ secrets.DEVELOPER_PLATFORM_GOOGLE_CLIENT_ID }} \
              --set auth.google.clientSecret=${{ secrets.DEVELOPER_PLATFORM_GOOGLE_CLIENT_SECRET }} \
              --set auth.github.clientId=${{ secrets.DEVELOPER_PLATFORM_GITHUB_CLIENT_ID }} \
              --set auth.github.clientSecret=${{ secrets.DEVELOPER_PLATFORM_GITHUB_CLIENT_SECRET }} \
              --set postgresql.useExistingPostgresSecret.connectionUri=${{ secrets.DEVELOPER_PLATFORM_POSTGRES_CONNECTION_URI }} \
              --set redis.connectionUri=${{ secrets.DEVELOPER_PLATFORM_REDIS_CONNECTION_URI }} \
              --namespace platform \
              --timeout 10m
          fi